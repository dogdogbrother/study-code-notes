(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{160:function(e,a,t){"use strict";t.r(a);var o=t(0),s=Object(o.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"sourcemap的作用和配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sourcemap的作用和配置","aria-hidden":"true"}},[e._v("#")]),e._v(" sourceMap的作用和配置")]),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("我们打包后,打开文件,发现main.js文件96行报错.")]),t("br"),e._v("\nsourceMap,它是一个映射关系,他知道dist目录下的main.js文件96行实际对应的是src目录下的index.js文件的第一行.")])]),e._v(" "),t("h2",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置","aria-hidden":"true"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("上面我们的代码中是可以配置devtool项的,他默认是none,现在我们改成souce-map就行了.")])]),e._v(" "),t("li",[t("p",[e._v("重新打包,依旧报错,但是错误行显示的是src/index.js第一行.")])]),e._v(" "),t("li",[t("p",[e._v("打开webpack官网,搜索devtool,有一张表,里面列举了sourceMap的属性值和相对应的性能影响.可以看到,source-map会让打包变慢的,因为他要构建这种映射关系.\n我们还可以看到dist文件中多出一个main.js.map文件.")])]),e._v(" "),t("li",[t("p",[e._v("我们尝试改devtool值为inline-source-map.打包,测试效果和刚才是一样的,不过少了main.ja.map文件.查看main.js文件发现其实映射文件是打包到js文件里面了.")])]),e._v(" "),t("li",[t("p",[e._v("我们再尝试"),t("code",[e._v("devtool:cheap-inline-source-map")]),e._v(".打包,测试,发现效果还是一样的.\ncheap的作用是在抱错的时候只需要抱哪一行就行了,不用精准到字符列上.所以cheap的打包效率会高一点.\ncheap还有一个作用是,他只针对业务代码有效果,像第三方模块,loader都不会建立映射关系.")])]),e._v(" "),t("li",[t("p",[e._v("如果你不禁想处理业务代码,还想管理第三方模块的报错,那么可以修改为\n"),t("code",[e._v("cheap-module-inline-source-map")])])]),e._v(" "),t("li",[t("p",[e._v("eval效率是最高的,具体的后面我查看下其他人的博客,再补.")])])]),e._v(" "),t("h2",{attrs:{id:"推荐最佳实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推荐最佳实践","aria-hidden":"true"}},[e._v("#")]),e._v(" 推荐最佳实践")]),e._v(" "),t("ol",[t("li",[e._v("开发过程中,我们的"),t("code",[e._v("mode:development")]),e._v("时,"),t("code",[e._v("devtool:cheap-module-eval-source-map")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);