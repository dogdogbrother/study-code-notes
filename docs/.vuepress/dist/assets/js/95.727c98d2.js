(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{126:function(a,s,t){"use strict";t.r(s);var n=t(0),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"loader简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loader简介","aria-hidden":"true"}},[a._v("#")]),a._v(" loader简介")]),a._v(" "),t("h2",{attrs:{id:"loader是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loader是什么","aria-hidden":"true"}},[a._v("#")]),a._v(" loader是什么")]),a._v(" "),t("p",[a._v("我们打开webpack的官网,点击loaders或者plugins,会有茫茫多的工具配置说明,根本看不过来.")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("接着3-文件我们如果在刚才的js文件中引入一个图片"),t("code",[a._v("var avatar = require('./avatar.jpg')")])])]),a._v(" "),t("li",[t("p",[a._v("然后打包,运行"),t("code",[a._v("npm run bundle")]),a._v(",发现报错.这是因为webpack默认是知道怎么打包js模块的,但是他没有办法打包图片模块.这时候就需要我们告诉wabpack如何打包.")])]),a._v(" "),t("li",[t("p",[a._v("我们进入webpack.config.js文件,添加如下代码")])])]),a._v(" "),t("div",{staticClass:"language-JavaScript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[a._v("module"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    rules"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            test"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/\\.jpg$/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n            use"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                    loader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'file-loader'")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v("这段代码告诉webpack,当匹配到jpg结尾的文件时,就用file-loader工具进行打包.")]),a._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[a._v("光添加配置没用啊,还得安装."),t("code",[a._v("npm install file-loader -D")]),a._v(".再次打包,没问题.查看dist文件,多出一个命名乱序的图片,点击查看就是我们刚才引入打包的文件.原来webpack会把资源一并打包到dist目录.")])]),a._v(" "),t("h2",{attrs:{id:"知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#知识点","aria-hidden":"true"}},[a._v("#")]),a._v(" 知识点")]),a._v(" "),t("ol",[t("li",[a._v("当file-loader发现一个需要打包的资源的时候,他会把这个资源移动到dist目录下,并改名(是可以自定义改名的),然后他会把资源在dist目录下的路径返回给js页面的变量之中.由此可见,file-loader可以打包任何东西,text,png等等,因为他不会解析,只是移动并返回值而已.")])]),a._v(" "),t("p",[a._v("2.loader就是个打包的辅助方案,因为webpack只认js文件模块.")])])}),[],!1,null,null,null);s.default=e.exports}}]);