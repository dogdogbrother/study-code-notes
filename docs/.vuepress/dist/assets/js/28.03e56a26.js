(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{81:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"关于this的2个误解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于this的2个误解","aria-hidden":"true"}},[t._v("#")]),t._v(" 关于this的2个误解")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("this应该是目前端中出现最多的关键字了")]),a("br"),t._v("\n先讲2个误解,最后总结this到底是啥东西.")])]),t._v(" "),a("h2",{attrs:{id:"this指向自身"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this指向自身","aria-hidden":"true"}},[t._v("#")]),t._v(" this指向自身")]),t._v(" "),a("p",[t._v("人们很容易把 this 理解成指向函数自身，这个推断从英语的语法角度来说是说得通的(笔者曾经也是这么以为的),但事实上却是不对的.")]),t._v(" "),a("p",[t._v("举个例子,我们想要记录下函数 foo 被调用的次数,思考一下下面的代码:")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录 foo 被调用的次数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nfoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的代码意图很明显,因为函数也是对象,我们给foo加了一个属性count")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果this代表的是函数自身的话,那么foo.count就等于this.count")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//我们执行了五次foo函数,foo.count应该也等于5才是.")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//然后事实上 打印出来的却是 0")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("h4",{attrs:{id:"这里有一个疑问-“如果我增加的-count-属性和预期的不一样，那我增加的-this-count-是哪个-count-”"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#这里有一个疑问-“如果我增加的-count-属性和预期的不一样，那我增加的-this-count-是哪个-count-”","aria-hidden":"true"}},[t._v("#")]),t._v(" 这里有一个疑问 “如果我增加的 count 属性和预期的不一样，那我增加的 this.count 是哪个 count ?”")]),t._v(" "),a("p",[t._v("我们在前面的作用域章节里面有涉及到,如果当RHS查询不到对应的变量的时候,就会在全局创建一个变量"),a("code",[t._v("count")]),t._v("变量,值为NaN.")]),t._v(" "),a("h4",{attrs:{id:"如果我们想要实现记录foo-count-应该怎么做呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果我们想要实现记录foo-count-应该怎么做呢","aria-hidden":"true"}},[t._v("#")]),t._v(" 如果我们想要实现记录"),a("code",[t._v("foo.count")]),t._v(",应该怎么做呢.")]),t._v(" "),a("ol",[a("li",[t._v("第一种方法比较简单,就是让"),a("code",[t._v("count")]),t._v("脱离和"),a("code",[t._v("foo")]),t._v("的关联,单独是一个变量.这是比较简单的做法,利用了词法作用域.因为代码比较简单我就不贴了.")]),t._v(" "),a("li",[t._v("第二种方法是真正的自己调用自己,也就是用"),a("code",[t._v("foo.count")]),t._v("代替"),a("code",[t._v("this.count")]),t._v(",我们上面也说了,代码失败的原因就是this不代表自己,用foo标识符就没问题.")]),t._v(" "),a("li",[t._v("最后的方法是强制"),a("code",[t._v("this")]),t._v("执行"),a("code",[t._v("foo")]),t._v("函数对象.函数和上面的代码是一样的,不同的是在调用"),a("code",[t._v("foo")]),t._v("函数的时候使用call方法来改变this的指向.")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4,没问题,正确")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h2",{attrs:{id:"this指向的是它的作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this指向的是它的作用域","aria-hidden":"true"}},[t._v("#")]),t._v(" this指向的是它的作用域")]),t._v(" "),a("p",[t._v("这个问题有点复杂，因为在某种情况下它好像是正确的,但是在其他情况下它却明显是错误的。")]),t._v(" "),a("p",[t._v("需要明确的是，"),a("code",[t._v("this")]),t._v(" 在任何情况下都不指向函数的词法作用域。")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("JavaScript")]),t._v(" 内部，作用域确实和对象类似,可见的标识符都是它的属性。但是作用域“对象”无法通过 "),a("code",[t._v("JavaScript")]),t._v(" 代码访问，它存在于 "),a("code",[t._v("JavaScript")]),t._v(" 引擎内部。")]),t._v(" "),a("h2",{attrs:{id:"小结-this到底是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结-this到底是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" 小结,this到底是什么")]),t._v(" "),a("p",[a("code",[t._v("this")]),t._v("是在"),a("strong",[t._v("运行时进行绑定")]),t._v("的,并不是在编写时绑定,它的上下文取决于函数调用时的各种条件。"),a("code",[t._v("this")]),t._v("的绑定和函数声明的位置没有任何关系,只取决于函数的调用方式。")]),t._v(" "),a("p",[t._v("当一个函数被调用时,会创建一个活动记录(有时候也称为执行上下文)。这个记录会包含函数在哪里被调用(调用栈)、函数的调用方法、传入的参数等信息。"),a("code",[t._v("this")]),t._v("就是记录的其中一个属性，会在函数执行的过程中用到。")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("this")]),t._v("实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);