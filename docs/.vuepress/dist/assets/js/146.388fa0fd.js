(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{119:function(s,a,t){"use strict";t.r(a);var n=t(0),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"webpack和浏览器缓存-caching-shimming的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack和浏览器缓存-caching-shimming的作用","aria-hidden":"true"}},[s._v("#")]),s._v(" webpack和浏览器缓存(caching),Shimming的作用")]),s._v(" "),t("blockquote",[t("p",[s._v("场景是这样的,我们打包好后上线了,用户也访问我们的index.html文件了,用户加载了很多js文件,这时候如果用户刷新页面,其实是不会重复加载页面的,而是会从缓存中拿.")])]),s._v(" "),t("h5",{attrs:{id:"那么问题来了-如果在用户浏览的过程中-我们更新了dist目录-用户在刷新页面会重新加载吗-答案是不会-因为我们js文件内容虽然变了-但是名字没变-浏览器还是默认是不变的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#那么问题来了-如果在用户浏览的过程中-我们更新了dist目录-用户在刷新页面会重新加载吗-答案是不会-因为我们js文件内容虽然变了-但是名字没变-浏览器还是默认是不变的","aria-hidden":"true"}},[s._v("#")]),s._v(" 那么问题来了,如果在用户浏览的过程中,我们更新了dist目录,用户在刷新页面会重新加载吗?答案是不会,因为我们js文件内容虽然变了,但是名字没变.浏览器还是默认是不变的.")]),s._v(" "),t("ol",[t("li",[s._v("我们在webpack.prod.js中output设置下即可.")])]),s._v(" "),t("div",{staticClass:"language-JavaScript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("    output"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        filename"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'[name].[contenthash].js'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        chunkFilename"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'[name].[contenthash].js'")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("这里我写个备注,"),t("code",[s._v("filename")]),s._v(",和"),t("code",[s._v("chunkFilename")]),s._v("有什么不同呢,"),t("code",[s._v("filename")]),s._v("指的就是我们index.html直接引入的css文件,"),t("code",[s._v("chunkFilename1")]),s._v("是我们在js文件中引入的css文件.")])]),s._v(" "),t("blockquote",[t("p",[s._v("shimming是垫片的意思,这个意思其实是挺广泛的,只是一个概念.")])]),s._v(" "),t("h5",{attrs:{id:"我们在以前用-来代替lodash-也经常使用-来来代替jq-那么我们没开一个新的js文件的时候都要import-lodash和jq-实在有点麻烦-我们可以使用provodeplugin来处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#我们在以前用-来代替lodash-也经常使用-来来代替jq-那么我们没开一个新的js文件的时候都要import-lodash和jq-实在有点麻烦-我们可以使用provodeplugin来处理","aria-hidden":"true"}},[s._v("#")]),s._v(" 我们在以前用 "),t("code",[s._v("_")]),s._v(" 来代替lodash,也经常使用 "),t("code",[s._v("$")]),s._v(" 来来代替jq.那么我们没开一个新的js文件的时候都要import lodash和jq,实在有点麻烦.我们可以使用ProvodePlugin来处理.")]),s._v(" "),t("blockquote",[t("p",[s._v("Provode意思是提供,规定,准备的意思.")])]),s._v(" "),t("ol",[t("li",[s._v("我们在webpack.common.js中编写如下代码.")])]),s._v(" "),t("div",{staticClass:"language-JavaScript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v(" plugin"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("webpack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ProvodePlugin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        $"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'jquery'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        _"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lodash'")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[s._v("这样,当我们在页面中使用 '$' 来使用jq的时候,webpack会自动帮我们在代码的头部生成"),t("code",[s._v("import $ from 'jquery'")]),s._v(".假如我们想使用"),t("code",[s._v("_join")]),s._v("这个方法呢,如下设置即可."),t("code",[s._v("_join:['lodash','join']")])])]),s._v(" "),t("li",[t("p",[s._v("如果我们在js文件中打印"),t("code",[s._v("this")]),s._v(",会输出什么呢."),t("code",[s._v("this")]),s._v("其实就是当前模块自身,如果我想让这个this指向window可以吗.可以.")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);